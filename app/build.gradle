apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "trickyquestion.messenger"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    // fix for mock android classes
    testOptions {
        unitTests.returnDefaultValues = true
    }
    //Fix for Jenkins
    lintOptions {
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
        lintConfig file("../lint.xml")
    }
}

repositories {
    maven {
        url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo'
    }
    mavenCentral()
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.bignerdranch.android:expandablerecyclerview:1.0.3'
    implementation 'com.eftimoff:android-viewpager-transformers:1.0.1@aar'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.melnykov:floatingactionbutton:1.3.0'
    implementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.uphyca:stetho_realm:2.1.0'
    implementation 'me.yokeyword:swipebackfragment:0.3.0'
    implementation 'de.greenrobot:eventbus:2.4.0'
    implementation 'com.daasuu:BubbleLayout:1.2.0'
    implementation 'com.github.QuadFlask:colorpicker:0.0.13'
    implementation 'com.github.lzyzsd:circleprogress:1.2.1'
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation "org.powermock:powermock-classloading-xstream:$powermock_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "org.robolectric:shadows-support-v$robolectric_shadow_version"
}

realm {
    syncEnabled = true
}

// for android instrumental test coverage use task: jacocoAndroidTestReportDebug
task jacocoAndroidTestReportDebug(type:JacocoReport, dependsOn: "connectedDebugAndroidTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      "**/realm/**",
                      '**/Manifest*.*',
                      'android/**/*.*']

    def debugTree = fileTree(dir:
            "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])

    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])

    reports {
        xml.enabled = true
        csv.enabled = false
        html.enabled = true
    }
}

// for unit test coverage use task: jacocoTestReportDebug
junitJacoco {
    excludes = ["**/R*.class",
                "**/realm/**",
                "**/android/support/**",
                "**/ogaclejapan/smarttablayout/**",
                "**/eftimoff/viewpager/transformators/**",
                "**/uphyca/stetho_realm/**",
                "**/getkeepsafe/relinker/**",
                "**/melnykov/fab/**",
                "**/butterknife/**",
                "**/android/arch/lifecycle/**",
                "**/yokeyword/swipebackfragment/**",
                "**/ryanbrooks/expandablerecyclerview/**",
                "**/flask/colorpicker/**",
                "**/hdodenhof/circleimageview/**",
                "**/daasuu/bl/**",
                "**/lzyzsd/circleprogress/**",
                "**/facebook/stetho/**"]
    includeNoLocationClasses = false
}
